#!/bin/bash
PAM_MODULE="pam_authnull.so"
# Prompt for ORG_ID and TENANT_ID
read -p "Enter ORG_ID: " ORG_ID
read -p "Enter TENANT_ID: " TENANT_ID

# Detect OS and set PAM_PATH accordingly
detect_os() {
    if grep -qi 'centos\|rhel\|rocky\|alma' /etc/os-release 2>/dev/null; then
        PAM_PATH="/lib64/security/${PAM_MODULE}"
        PKG_MANAGER="yum"
    
    elif grep -qi 'oracle' /etc/os-release 2>/dev/null; then
        PAM_PATH="/lib64/security/${PAM_MODULE}"
        SSHD_CONFIG="/etc/ssh/sshd_config.d/50-redhat.conf"
        PKG_MANAGER="yum"

    elif grep -qi 'ubuntu\|debian' /etc/os-release 2>/dev/null; then
        PAM_PATH="/lib/x86_64-linux-gnu/security/${PAM_MODULE}"
        PKG_MANAGER="apt-get"
    else
        echo "Unknown OS."
        exit 1
    fi
    echo "Detected Package Manager: $PKG_MANAGER"
    echo "Detected PAM path: $PAM_PATH"
    echo "Detected SSHD config: $SSHD_CONFIG"
    


    # Check if curl is installed, if not install it
    if ! command -v curl >/dev/null 2>&1; then
        echo "curl not found. Installing..."
        if [ "$PKG_MANAGER" = "yum" ]; then
            yum install -y curl
            yum install -y make 
        elif [ "$PKG_MANAGER" = "apt-get" ]; then
            apt-get update -y
            apt-get install -y curl
            apt-get install -y make 
        else
           echo "Please install make and try again..."
           echo "Exiting"
            exit 1
        fi
    else
        echo "curl is already installed."
        echo "make is already installed."
    fi
}
detect_os
#Configure the sshd_config file
echo "Configuring /etc/ssh/sshd_config..."

if grep -q "^ChallengeResponseAuthentication no" /etc/ssh/sshd_config; then
    sudo sed -i 's/^ChallengeResponseAuthentication no/ChallengeResponseAuthentication yes/g' /etc/ssh/sshd_config
fi

# Ensure ChallengeResponseAuthentication is set to "yes", regardless of its current state
if grep -Eq "^(#?\s*ChallengeResponseAuthentication\s+)" /etc/ssh/sshd_config; then
    sudo sed -i "s/^#\?\s*ChallengeResponseAuthentication\s\+.*/ChallengeResponseAuthentication yes/" /etc/ssh/sshd_config
else
    echo "ChallengeResponseAuthentication yes" | sudo tee -a /etc/ssh/sshd_config
fi
echo "Updated /etc/ssh/sshd_config: ChallengeResponseAuthentication set to yes"

# Ensure PasswordAuthentication is set to "yes", regardless of its current state
if grep -Eq "^(#?\s*PasswordAuthentication\s+)" /etc/ssh/sshd_config; then
    sudo sed -i "s/^#\?\s*PasswordAuthentication\s\+.*/PasswordAuthentication yes/" /etc/ssh/sshd_config
else
    echo "PasswordAuthentication yes" | sudo tee -a /etc/ssh/sshd_config
fi
echo "Updated /etc/ssh/sshd_config: PasswordAuthentication set to yes"

if ! grep -q "AuthenticationMethods keyboard-interactive" /etc/ssh/sshd_config; then
    sudo sh -c 'echo "AuthenticationMethods keyboard-interactive" >> /etc/ssh/sshd_config'
fi

# Define the auth line to be added
AUTH_LINE="auth sufficient $PAM_PATH tenant_id=$TENANT_ID org_id=$ORG_ID"

# Check if the line already exists in the file
PAM_FILE="/etc/pam.d/sshd"

if grep -Fxq "$AUTH_LINE" "$PAM_FILE"; then
    echo "Entry already exists in $PAM_FILE"
else
    # Insert the line at the beginning of the file
    sed -i "1s|^|$AUTH_LINE\n|" "$PAM_FILE"
    echo "Added auth line as the first entry in $PAM_FILE"
fi
if [ "$PKG_MANAGER" = "apt-get" ]; then
# Comment out @include common-auth line
echo "Commenting out '@include common-auth' in /etc/pam.d/sshd..."
if grep -q "@include common-auth" /etc/pam.d/sshd; then
    sudo sed -i 's/^@include common-auth/#&/' /etc/pam.d/sshd
    echo "Successfully commented out '@include common-auth'."
fi
fi

if [ "$PKG_MANAGER" = "yum" ]; then
     #Comment the line to avoid password authentication
        sed -i 's/^[[:space:]]*auth[[:space:]]\+include[[:space:]]\+system-auth/#&/' "$PAM_FILE"
        sed -i 's/^[[:space:]]*password[[:space:]]\+include[[:space:]]\+system-auth/#&/' "$PAM_FILE"
        echo "Commented out 'auth include system-auth' and 'password include system-auth' in $PAM_FILE"
fi
